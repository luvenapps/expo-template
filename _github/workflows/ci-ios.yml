name: iOS CI

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - 'docs/**'
      - 'scripts/**'
      - '.editorconfig'
      - '.gitattributes'
      - '.gitignore'
      - '.nvmrc'
      - '.node-version'
      - '.prettierignore'
      - '.prettierrc'
      - '.prettierrc.*'
      - '.eslintrc'
      - '.eslintrc.*'
      - 'CODEOWNERS'
      - 'LICENSE*'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - 'docs/**'
      - 'scripts/**'
      - '.editorconfig'
      - '.gitattributes'
      - '.gitignore'
      - '.nvmrc'
      - '.node-version'
      - '.prettierignore'
      - '.prettierrc'
      - '.prettierrc.*'
      - '.eslintrc'
      - '.eslintrc.*'
      - 'CODEOWNERS'
      - 'LICENSE*'
  workflow_dispatch:

permissions:
  contents: read

env:
  IOS_DEVICE: 'iPhone 17'
  MAESTRO_VERSION: '2.0.6'
  FASTLANE_VERSION: '2.228.0'
  RETRIES: ${{ vars.RETRIES }}
  RETRY_DELAY: ${{ vars.RETRY_DELAY }}
  MAESTRO_DRIVER_STARTUP_TIMEOUT: 60000

concurrency:
  group: ios-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-hosted:
    name: Build ‚Ä¢ E2E (iOS) - Hosted MacOS
    if: vars.USE_SELF_HOSTED != 'true'
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.1.0
          cache: 'npm'

      - name: Setup Ruby (for Fastlane)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler: 'none'

      - name: Install deps
        run: npm ci

      - name: Install EAS CLI
        shell: bash
        run: |
          npm i -g eas-cli@16.23.0
          eas --version

      - name: Make CI scripts executable
        run: chmod +x .github/scripts/*.sh

      - name: Setup Fastlane
        shell: bash
        run: .github/scripts/setup_fastlane.sh  "${{ env.FASTLANE_VERSION }}"

      - name: Doctor
        run: npm run doctor
        continue-on-error: true

      - name: Verify Expo/RN dependency alignment
        shell: bash
        run: |
          set -e
          npx expo --version || true
          node -e "console.log('react-native', require('react-native/package.json').version)" || true
          node -e "console.log('expo', require('expo/package.json').version)" || true
          # Strict: fail if mismatched so lockfile must be updated in a PR
          if ! npx expo install --check; then
            echo "‚ùå Expo dependency mismatch. Run 'npx expo install --fix' locally and commit the updated package-lock.json."
            exit 1
          fi

      - name: Setup Maestro
        shell: bash
        run: .github/scripts/setup_maestro.sh "${{ env.MAESTRO_VERSION }}"

      - name: Compute iOS build fingerprint
        id: ios_fp
        shell: bash
        run: |
          set -euo pipefail
          FILES="$(git ls-files \
            'app.json' \
            'app.config.*' \
            'eas.json' \
            'package.json' \
            'package-lock.json' \
            'babel.config.*' \
            'metro.config.*' \
            'tamagui.config.ts' \
            'tsconfig.*' \
            'index.*' \
            '*.env' '.env.*' \
            'scripts/**' \
            'app/**' 'src/**' 'components/**' 'screens/**' \
            'App.*' \
            'plugins/**' \
            'assets/**' \
            '**/*.png' '**/*.svg' '**/*.ttf' '**/*.otf' \
            'ios/**' \
          )"
          SALT="node=$(node -v);xcode=$(xcodebuild -version | tr '\n' ' ')"
          HASH=$( (echo "$SALT"; echo "$FILES"; echo "$FILES" | xargs -I{} shasum "{}") | shasum -a 256 | awk '{print $1}' )
          echo "key=ios-app-${HASH}" >> "$GITHUB_OUTPUT"

      - name: Restore the tar.gz iOS app
        id: ios_cache
        uses: actions/cache/restore@v4
        with:
          path: ./*.tar.gz
          key: ${{ steps.ios_fp.outputs.key }}

      - name: Build e2erelease
        if: steps.ios_cache.outputs.cache-hit != 'true'
        shell: bash
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          set -euo pipefail
          ATTEMPTS="${RETRIES:-2}"
          DELAY="${RETRY_DELAY:-2}"
          i=1
          while [ "$i" -le "$ATTEMPTS" ]; do
            echo "üèóÔ∏è  iOS build attempt $i/$ATTEMPTS..."
            if eas build --platform ios --profile e2eRelease --local --non-interactive; then
              echo "‚úÖ Build succeeded on attempt $i"
              exit 0
            fi
            if [ "$i" -lt "$ATTEMPTS" ]; then
              echo "‚ùå Build attempt $i failed ‚Äî retrying in ${DELAY}s..."
              sleep "$DELAY"
            fi
            i=$((i+1))
          done
          echo "‚ùå Build failed after $ATTEMPTS attempts"
          exit 1

      - name: Save the tar.gz iOS app
        if: steps.ios_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ./*.tar.gz
          key: ${{ steps.ios_fp.outputs.key }}

      - name: Locate .app artifact
        id: find_app
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT_TAR=$(ls -1t ./*.tar.gz 2>/dev/null | head -n1 || true)
          if [ -n "$ARTIFACT_TAR" ]; then
            echo "üì¶ Extracting $ARTIFACT_TAR ..."
            mkdir -p extracted_app
            tar -xzf "$ARTIFACT_TAR" -C extracted_app
          fi
          APP=$(find extracted_app -type d -name "*.app" -maxdepth 6 | head -n1 || true)
          echo "app=$APP" >> $GITHUB_OUTPUT
          [ -n "$APP" ] || (echo "No .app found after extracting $ARTIFACT_TAR"; ls -alh extracted_app || true; exit 1)

      - name: Boot simulator
        shell: bash
        run: .github/scripts/ios_boot_simulator.sh

      - name: Install on simulator and warm up
        shell: bash
        timeout-minutes: 10
        run: .github/scripts/ios_install_app.sh "${{ steps.find_app.outputs.app }}"

      - name: Run E2E tests
        shell: bash
        run: .github/scripts/ios_run_e2e.sh

      - name: Upload Xcode build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-build-artifacts-ios-hosted
          path: |
            ios/build/**/*.xcresult
            ios/build/**/*.log
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build/*.log
          if-no-files-found: ignore

      - name: Upload E2E artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-ios-hosted
          path: |
            e2e-artifacts/**/*
            ios/build/**/*.log
          include-hidden-files: true

      - name: Clean workspace
        if: ${{ always() }}
        shell: bash
        run: |
          echo "üßπ Cleaning hosted workspace (removing iOS build artifacts and E2E outputs)..."
          rm -rf ios/build e2e-artifacts || true

  ios-selfhosted:
    name: Lint ‚Ä¢ Test ‚Ä¢ Build ‚Ä¢ E2E (iOS) - Self-hosted MacOS
    if: vars.USE_SELF_HOSTED == 'true'
    runs-on: [self-hosted, macos, arm64]
    timeout-minutes: 45
    concurrency:
      group: selfhosted-mobile-${{ github.repository }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.1.0
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Check EAS CLI
        shell: bash
        run: |
          if ! command -v eas >/dev/null 2>&1; then
            echo "‚ùå EAS CLI not found on this runner."
            echo "Install it globally: npm i -g eas-cli@16.23.0"
            exit 1
          fi
          eas --version

      - name: Verify Expo/RN dependency alignment
        shell: bash
        run: |
          npx expo --version || true
          node -e "console.log('react-native', require('react-native/package.json').version)" || true
          node -e "console.log('expo', require('expo/package.json').version)" || true
          # Check (non-fatal) Expo SDK alignment
          npx expo install --check || true

      - name: Make CI scripts executable
        run: chmod +x .github/scripts/*.sh

      - name: Setup Fastlane
        shell: bash
        run: .github/scripts/setup_fastlane.sh  "${{ env.FASTLANE_VERSION }}"

      - name: Setup Maestro
        shell: bash
        run: .github/scripts/setup_maestro.sh "${{ env.MAESTRO_VERSION }}"

      - name: Check formatting
        run: npm run format:check

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm test -- --coverage

      # - name: Upload coverage to Codecov
      #   if: ${{ !cancelled() }}
      #   uses: codecov/codecov-action@v5
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: ./coverage/lcov.info
      #     slug: org/repo
      #     flags: selfhosted-ios
      #     fail_ci_if_error: false

      # - name: Upload test results to Codecov
      #   if: ${{ !cancelled() }}
      #   uses: codecov/test-results-action@v1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     flags: selfhosted-ios
      #     fail_ci_if_error: false

      - name: Doctor
        run: npm run doctor
        continue-on-error: true

      - name: Compute iOS build fingerprint
        id: ios_fp
        shell: bash
        run: |
          set -euo pipefail
          FILES="$(git ls-files \
            'app.json' \
            'app.config.*' \
            'eas.json' \
            'package.json' \
            'package-lock.json' \
            'babel.config.*' \
            'metro.config.*' \
            'tamagui.config.ts' \
            'tsconfig.*' \
            'index.*' \
            '*.env' '.env.*' \
            'scripts/**' \
            'app/**' 'src/**' 'components/**' 'screens/**' \
            'App.*' \
            'plugins/**' \
            'assets/**' \
            '**/*.png' '**/*.svg' '**/*.ttf' '**/*.otf' \
            'ios/**' \
          )"
          SALT="node=$(node -v);xcode=$(xcodebuild -version | tr '\n' ' ')"
          HASH=$( (echo "$SALT"; echo "$FILES"; echo "$FILES" | xargs -I{} shasum "{}") | shasum -a 256 | awk '{print $1}' )
          echo "key=ios-app-${HASH}" >> "$GITHUB_OUTPUT"

      - name: Restore the tar.gz iOS app
        id: ios_cache
        uses: actions/cache/restore@v4
        with:
          path: ./*.tar.gz
          key: ${{ steps.ios_fp.outputs.key }}

      - name: Build e2erelease
        if: steps.ios_cache.outputs.cache-hit != 'true'
        shell: bash
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          set -euo pipefail
          ATTEMPTS="${RETRIES:-2}"
          DELAY="${RETRY_DELAY:-2}"
          i=1
          while [ "$i" -le "$ATTEMPTS" ]; do
            echo "üèóÔ∏è  iOS build attempt $i/$ATTEMPTS..."
            if eas build --platform ios --profile e2eRelease --local --non-interactive; then
              echo "‚úÖ Build succeeded on attempt $i"
              exit 0
            fi
            if [ "$i" -lt "$ATTEMPTS" ]; then
              echo "‚ùå Build attempt $i failed ‚Äî retrying in ${DELAY}s..."
              sleep "$DELAY"
            fi
            i=$((i+1))
          done
          echo "‚ùå Build failed after $ATTEMPTS attempts"
          exit 1

      - name: Save the tar.gz iOS app
        if: steps.ios_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ./*.tar.gz
          key: ${{ steps.ios_fp.outputs.key }}

      - name: Locate .app artifact
        id: find_app
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT_TAR=$(ls -1t ./*.tar.gz 2>/dev/null | head -n1 || true)
          if [ -n "$ARTIFACT_TAR" ]; then
            echo "üì¶ Extracting $ARTIFACT_TAR ..."
            mkdir -p extracted_app
            tar -xzf "$ARTIFACT_TAR" -C extracted_app
          fi
          APP=$(find extracted_app -type d -name "*.app" -maxdepth 6 | head -n1 || true)
          echo "app=$APP" >> $GITHUB_OUTPUT
          [ -n "$APP" ] || (echo "No .app found after extracting $ARTIFACT_TAR"; ls -alh extracted_app || true; exit 1)

      - name: Boot simulator
        shell: bash
        run: .github/scripts/ios_boot_simulator.sh

      - name: Install on simulator and warm up
        shell: bash
        timeout-minutes: 10
        run: .github/scripts/ios_install_app.sh "${{ steps.find_app.outputs.app }}"

      - name: Run E2E tests
        shell: bash
        run: .github/scripts/ios_run_e2e.sh

      - name: Upload Xcode build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-build-artifacts-ios-selfhosted
          path: |
            ios/build/**/*.xcresult
            ios/build/**/*.log
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build/*.log
          if-no-files-found: ignore

      - name: Upload E2E artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-ios-selfhosted
          path: |
            e2e-artifacts/**/*
            ios/build/**/*.log
          include-hidden-files: true

      - name: Clean self-hosted workspace
        if: ${{ always() }}
        shell: bash
        run: .github/scripts/clean_selfhosted_workspace.sh
