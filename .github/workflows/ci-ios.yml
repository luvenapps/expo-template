name: iOS CI

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - 'docs/**'
      - '.editorconfig'
      - '.gitattributes'
      - '.gitignore'
      - '.nvmrc'
      - '.node-version'
      - '.prettierignore'
      - '.prettierrc'
      - '.prettierrc.*'
      - '.eslintrc'
      - '.eslintrc.*'
      - 'CODEOWNERS'
      - 'LICENSE*'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - 'docs/**'
      - '.editorconfig'
      - '.gitattributes'
      - '.gitignore'
      - '.nvmrc'
      - '.node-version'
      - '.prettierignore'
      - '.prettierrc'
      - '.prettierrc.*'
      - '.eslintrc'
      - '.eslintrc.*'
      - 'CODEOWNERS'
      - 'LICENSE*'
  workflow_dispatch:

permissions:
  contents: read

env:
  IOS_DEVICE: 'iPhone 17'
  MAESTRO_VERSION: 'v2.0.3'

concurrency:
  group: ios-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios-quality-hosted:
    name: Format • Lint • Unit tests (iOS) - Hosted Ubuntu
    if: vars.USE_SELF_HOSTED != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: expo-template-testing
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Setup Node 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.1.0
          cache: 'npm'

      - name: Scaffold & verify (retry once)
        working-directory: .
        shell: bash
        run: |
          set -euo pipefail
          max=2
          attempt=1
          while [ "$attempt" -le "$max" ]; do
            echo "==> Attempt $attempt/$max: scaffold + verify"
            rm -rf expo-template-testing || true
            npx create-expo-app expo-template-testing --template "$GITHUB_WORKSPACE" --yes
            pushd expo-template-testing >/dev/null
            npx expo --version || true
            node -e "console.log('react-native', require('react-native/package.json').version)" || true
            node -e "console.log('expo', require('expo/package.json').version)" || true
            if npx expo install --check; then
              echo "✅ Expo dependency alignment OK"
              popd >/dev/null
              break
            fi
            popd >/dev/null
            if [ "$attempt" -lt "$max" ]; then
              echo "⚠️ Verification failed. Retrying from scratch..." >&2
              attempt=$((attempt+1))
              continue
            else
              echo "❌ Verification failed after $max attempts." >&2
              exit 1
            fi
          done
      - name: Doctor
        run: npm run doctor
        continue-on-error: true

      - name: Check formatting
        run: npm run format:check

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm run test

  ios-hosted:
    name: Build • E2E (iOS) - Hosted MacOS
    if: vars.USE_SELF_HOSTED != 'true'
    runs-on: macos-latest
    timeout-minutes: 45
    defaults:
      run:
        working-directory: expo-template-testing

    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.1.0
          cache: 'npm'

      - name: Scaffold & verify (retry once)
        working-directory: .
        shell: bash
        run: |
          set -euo pipefail
          max=2
          attempt=1
          while [ "$attempt" -le "$max" ]; do
            echo "==> Attempt $attempt/$max: scaffold + verify"
            rm -rf expo-template-testing || true
            npx create-expo-app expo-template-testing --template "$GITHUB_WORKSPACE" --yes
            pushd expo-template-testing >/dev/null
            npx expo --version || true
            node -e "console.log('react-native', require('react-native/package.json').version)" || true
            node -e "console.log('expo', require('expo/package.json').version)" || true
            if npx expo install --check; then
              echo "✅ Expo dependency alignment OK"
              popd >/dev/null
              break
            fi
            popd >/dev/null
            if [ "$attempt" -lt "$max" ]; then
              echo "⚠️ Verification failed. Retrying from scratch..." >&2
              attempt=$((attempt+1))
              continue
            else
              echo "❌ Verification failed after $max attempts." >&2
              exit 1
            fi
          done

      - name: Clear Metro cache
        run: |
          rm -rf "$TMPDIR"/metro-* node_modules/.cache/metro || true

      - name: Cache Maestro CLI
        id: maestro-cache
        uses: actions/cache@v4
        with:
          path: ~/.maestro
          key: maestro-${{ runner.os }}-v1

      - name: Setup Maestro
        if: steps.maestro-cache.outputs.cache-hit != 'true'
        shell: bash
        run: .github/scripts/setup_maestro.sh "${{ env.MAESTRO_VERSION }}"

      - name: Cache CocoaPods
        id: pods-cache
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-macOS-${{ hashFiles('ios/Podfile.lock') }}
      - name: Save CocoaPods cache (post-build)
        if: always() && steps.pods-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ios/Pods
          key: pods-macOS-${{ hashFiles('ios/Podfile.lock') }}

      - name: Ensure iPhone simulator exists & booted
        timeout-minutes: 15
        shell: bash
        env:
          ERASE_SIMULATOR: 'true'
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "🚀 Attempt $attempt/3: boot iOS simulator"
            if .github/scripts/ios_boot_simulator.sh "${{ env.IOS_DEVICE }}"; then
              echo "✅ Simulator booted"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️  Boot failed, retrying in 10s..."; sleep 10
            else
              echo "❌ Failed to boot simulator after 3 attempts"; exit 1
            fi
          done

      - name: Build iOS (Simulator, headless)
        shell: bash
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "🏗️ Attempt $attempt/3: build iOS (sim)"
            if .github/scripts/ios_build.sh; then
              echo "✅ Build succeeded"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️ Build failed, retrying in 10s..."; sleep 10
            else
              echo "❌ Build failed after 3 attempts"; exit 1
            fi
          done

      - name: Upload Xcode build artifacts (hosted)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-build-artifacts-ios-hosted
          path: |
            ios/build/**/*.xcresult
            ios/build/**/*.log
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build/*.log
          if-no-files-found: ignore

      - name: Install built app on simulator
        shell: bash
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "📲 Attempt $attempt/3: install & warm up app"
            if .github/scripts/ios_install_and_warmup.sh; then
              echo "✅ App installed"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️  Install failed, retrying in 10s..."; sleep 10
            else
              echo "❌ Failed to install app after 3 attempts"; exit 1
            fi
          done

      - name: Run E2E tests
        shell: bash
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "🧪 Attempt $attempt/3: run E2E tests"
            if .github/scripts/ios_run_e2e.sh; then
              echo "✅ E2E passed"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️  E2E failed, retrying in 10s..."; sleep 10
            else
              echo "❌ E2E failed after 3 attempts"; exit 1
            fi
          done

      - name: Upload E2E artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-ios-hosted
          path: |
            e2e-artifacts/**/*
            ios/build/**/*.log
          include-hidden-files: true

      - name: Fail if E2E failed
        if: always()
        shell: bash
        run: |
          if [ -f e2e-artifacts/EXITCODE ] && [ "$(cat e2e-artifacts/EXITCODE)" != "0" ]; then
            echo "❌ E2E failed (see artifacts)."
            exit 1
          fi

      - name: Clean workspace (hosted)
        if: ${{ always() }}
        shell: bash
        run: |
          echo "🧹 Cleaning hosted workspace (removing iOS build artifacts and E2E outputs)..."
          rm -rf ios/build e2e-artifacts || true

  ios-selfhosted:
    name: Lint • Test • Build • E2E (iOS) - Self-hosted MacOS
    if: vars.USE_SELF_HOSTED == 'true'
    runs-on: [self-hosted, macos, arm64]
    timeout-minutes: 45
    concurrency:
      group: selfhosted-mobile-${{ github.repository }}
      cancel-in-progress: false
    defaults:
      run:
        working-directory: expo-template-testing

    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Setup Node 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.1.0
          cache: 'npm'

      - name: Scaffold & verify (retry once)
        working-directory: .
        shell: bash
        run: |
          set -euo pipefail
          max=2
          attempt=1
          while [ "$attempt" -le "$max" ]; do
            echo "==> Attempt $attempt/$max: scaffold + verify"
            rm -rf expo-template-testing || true
            npx create-expo-app expo-template-testing --template "$GITHUB_WORKSPACE" --yes
            pushd expo-template-testing >/dev/null
            npx expo --version || true
            node -e "console.log('react-native', require('react-native/package.json').version)" || true
            node -e "console.log('expo', require('expo/package.json').version)" || true
            if npx expo install --check; then
              echo "✅ Expo dependency alignment OK"
              popd >/dev/null
              break
            fi
            popd >/dev/null
            if [ "$attempt" -lt "$max" ]; then
              echo "⚠️ Verification failed. Retrying from scratch..." >&2
              attempt=$((attempt+1))
              continue
            else
              echo "❌ Verification failed after $max attempts." >&2
              exit 1
            fi
          done

      - name: Clear Metro cache
        run: |
          rm -rf "$TMPDIR"/metro-* node_modules/.cache/metro || true

      - name: Cache Maestro CLI
        id: maestro-cache
        uses: actions/cache@v4
        with:
          path: ~/.maestro
          key: maestro-${{ runner.os }}-v1

      - name: Setup Maestro
        if: steps.maestro-cache.outputs.cache-hit != 'true'
        shell: bash
        run: .github/scripts/setup_maestro.sh "${{ env.MAESTRO_VERSION }}"

      - name: Check formatting
        run: npm run format:check

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm run test

      - name: Doctor
        run: npm run doctor
        continue-on-error: true

      - name: Cache CocoaPods
        id: pods-cache
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-macOS-${{ hashFiles('ios/Podfile.lock') }}
      - name: Save CocoaPods cache (post-build)
        if: always() && steps.pods-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ios/Pods
          key: pods-macOS-${{ hashFiles('ios/Podfile.lock') }}

      - name: Ensure iPhone simulator exists & booted
        shell: bash
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "🚀 Attempt $attempt/3: boot iOS simulator"
            if .github/scripts/ios_boot_simulator.sh "${{ env.IOS_DEVICE }}"; then
              echo "✅ Simulator booted"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️  Boot failed, retrying in 10s..."; sleep 10
            else
              echo "❌ Failed to boot simulator after 3 attempts"; exit 1
            fi
          done

      - name: Build iOS (Simulator, headless)
        shell: bash
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "🏗️ Attempt $attempt/3: build iOS (sim)"
            if .github/scripts/ios_build.sh; then
              echo "✅ Build succeeded"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️ Build failed, retrying in 10s..."; sleep 10
            else
              echo "❌ Build failed after 3 attempts"; exit 1
            fi
          done

      - name: Upload Xcode build artifacts (self-hosted)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-build-artifacts-ios-selfhosted
          path: |
            ios/build/**/*.xcresult
            ios/build/**/*.log
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build/*.log
          if-no-files-found: ignore

      - name: Install built app on simulator
        shell: bash
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "📲 Attempt $attempt/3: install & warm up app"
            if .github/scripts/ios_install_and_warmup.sh; then
              echo "✅ App installed"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️  Install failed, retrying in 10s..."; sleep 10
            else
              echo "❌ Failed to install app after 3 attempts"; exit 1
            fi
          done

      - name: Run E2E tests
        shell: bash
        run: |
          set -euo pipefail
          for attempt in 1 2 3; do
            echo "🧪 Attempt $attempt/3: run E2E tests"
            if .github/scripts/ios_run_e2e.sh; then
              echo "✅ E2E passed"
              exit 0
            fi
            if [ "$attempt" -lt 3 ]; then
              echo "⚠️  E2E failed, retrying in 10s..."; sleep 10
            else
              echo "❌ E2E failed after 3 attempts"; exit 1
            fi
          done

      - name: Upload E2E artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-ios-selfhosted
          path: |
            e2e-artifacts/**/*
            ios/build/**/*.log
          include-hidden-files: true

      - name: Fail if E2E failed
        if: always()
        shell: bash
        run: |
          if [ -f e2e-artifacts/EXITCODE ] && [ "$(cat e2e-artifacts/EXITCODE)" != "0" ]; then
            echo "❌ E2E failed (see artifacts)."
            exit 1
          fi

      - name: Clean self-hosted workspace (safe)
        if: ${{ always() }}
        shell: bash
        run: .github/scripts/clean_selfhosted_workspace.sh
